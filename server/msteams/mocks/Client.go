// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"

	msteams "github.com/mattermost/mattermost-plugin-matterbridge/server/msteams"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClearSubscriptions provides a mock function with given fields:
func (_m *Client) ClearSubscriptions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *Client) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChannel provides a mock function with given fields: teamID, channelID
func (_m *Client) GetChannel(teamID string, channelID string) (*msteams.Channel, error) {
	ret := _m.Called(teamID, channelID)

	var r0 *msteams.Channel
	if rf, ok := ret.Get(0).(func(string, string) *msteams.Channel); ok {
		r0 = rf(teamID, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msteams.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(teamID, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeSnippet provides a mock function with given fields: url
func (_m *Client) GetCodeSnippet(url string) (string, error) {
	ret := _m.Called(url)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileURL provides a mock function with given fields: weburl
func (_m *Client) GetFileURL(weburl string) (string, error) {
	ret := _m.Called(weburl)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(weburl)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(weburl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessage provides a mock function with given fields: teamID, channelID, messageID
func (_m *Client) GetMessage(teamID string, channelID string, messageID string) (*msteams.Message, error) {
	ret := _m.Called(teamID, channelID, messageID)

	var r0 *msteams.Message
	if rf, ok := ret.Get(0).(func(string, string, string) *msteams.Message); ok {
		r0 = rf(teamID, channelID, messageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msteams.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(teamID, channelID, messageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReply provides a mock function with given fields: teamID, channelID, messageID, replyID
func (_m *Client) GetReply(teamID string, channelID string, messageID string, replyID string) (*msteams.Message, error) {
	ret := _m.Called(teamID, channelID, messageID, replyID)

	var r0 *msteams.Message
	if rf, ok := ret.Get(0).(func(string, string, string, string) *msteams.Message); ok {
		r0 = rf(teamID, channelID, messageID, replyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msteams.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, messageID, replyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeam provides a mock function with given fields: teamID
func (_m *Client) GetTeam(teamID string) (*msteams.Team, error) {
	ret := _m.Called(teamID)

	var r0 *msteams.Team
	if rf, ok := ret.Get(0).(func(string) *msteams.Team); ok {
		r0 = rf(teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*msteams.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAvatar provides a mock function with given fields: userID
func (_m *Client) GetUserAvatar(userID string) ([]byte, error) {
	ret := _m.Called(userID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshSubscriptionPeriodically provides a mock function with given fields: ctx, subscriptionID
func (_m *Client) RefreshSubscriptionPeriodically(ctx context.Context, subscriptionID string) error {
	ret := _m.Called(ctx, subscriptionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, subscriptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: teamID, channelID, parentID, message
func (_m *Client) SendMessage(teamID string, channelID string, parentID string, message string) (string, error) {
	ret := _m.Called(teamID, channelID, parentID, message)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(teamID, channelID, parentID, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(teamID, channelID, parentID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToChannel provides a mock function with given fields: teamID, channelID, notificationURL
func (_m *Client) SubscribeToChannel(teamID string, channelID string, notificationURL string) (string, error) {
	ret := _m.Called(teamID, channelID, notificationURL)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(teamID, channelID, notificationURL)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(teamID, channelID, notificationURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
